//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Lvrenyang.IO {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.lvrenyang.io']/class[@name='USBPrinting']"
	[global::Android.Runtime.Register ("com/lvrenyang/io/USBPrinting", DoNotGenerateAcw=true)]
	public partial class USBPrinting : global::Com.Lvrenyang.IO.IO {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/lvrenyang/io/USBPrinting", typeof (USBPrinting));

		internal static new IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected USBPrinting (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.lvrenyang.io']/class[@name='USBPrinting']/constructor[@name='USBPrinting' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe USBPrinting () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_Close;
#pragma warning disable 0169
		static Delegate GetCloseHandler ()
		{
			if (cb_Close == null)
				cb_Close = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Close));
			return cb_Close;
		}

		static void n_Close (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Lvrenyang.IO.USBPrinting> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.Close ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.lvrenyang.io']/class[@name='USBPrinting']/method[@name='Close' and count(parameter)=0]"
		[Register ("Close", "()V", "GetCloseHandler")]
		public virtual unsafe void Close ()
		{
			const string __id = "Close.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_Ctl_IIIIarrayBII;
#pragma warning disable 0169
		static Delegate GetCtl_IIIIarrayBIIHandler ()
		{
			if (cb_Ctl_IIIIarrayBII == null)
				cb_Ctl_IIIIarrayBII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIIIILII_I (n_Ctl_IIIIarrayBII));
			return cb_Ctl_IIIIarrayBII;
		}

		static int n_Ctl_IIIIarrayBII (IntPtr jnienv, IntPtr native__this, int requestType, int request, int value, int index, IntPtr native_buffer, int length, int timeout)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Lvrenyang.IO.USBPrinting> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var buffer = (byte[]) JNIEnv.GetArray (native_buffer, JniHandleOwnership.DoNotTransfer, typeof (byte));
			int __ret = __this.Ctl (requestType, request, value, index, buffer, length, timeout);
			if (buffer != null)
				JNIEnv.CopyArray (buffer, native_buffer);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.lvrenyang.io']/class[@name='USBPrinting']/method[@name='Ctl' and count(parameter)=7 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='int'] and parameter[7][@type='int']]"
		[Register ("Ctl", "(IIII[BII)I", "GetCtl_IIIIarrayBIIHandler")]
		public virtual unsafe int Ctl (int requestType, int request, int value, int index, byte[] buffer, int length, int timeout)
		{
			const string __id = "Ctl.(IIII[BII)I";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (requestType);
				__args [1] = new JniArgumentValue (request);
				__args [2] = new JniArgumentValue (value);
				__args [3] = new JniArgumentValue (index);
				__args [4] = new JniArgumentValue (native_buffer);
				__args [5] = new JniArgumentValue (length);
				__args [6] = new JniArgumentValue (timeout);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		static Delegate cb_Open_Landroid_hardware_usb_UsbManager_Landroid_hardware_usb_UsbDevice_;
#pragma warning disable 0169
		static Delegate GetOpen_Landroid_hardware_usb_UsbManager_Landroid_hardware_usb_UsbDevice_Handler ()
		{
			if (cb_Open_Landroid_hardware_usb_UsbManager_Landroid_hardware_usb_UsbDevice_ == null)
				cb_Open_Landroid_hardware_usb_UsbManager_Landroid_hardware_usb_UsbDevice_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_Z (n_Open_Landroid_hardware_usb_UsbManager_Landroid_hardware_usb_UsbDevice_));
			return cb_Open_Landroid_hardware_usb_UsbManager_Landroid_hardware_usb_UsbDevice_;
		}

		static bool n_Open_Landroid_hardware_usb_UsbManager_Landroid_hardware_usb_UsbDevice_ (IntPtr jnienv, IntPtr native__this, IntPtr native_manager, IntPtr native_device)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Lvrenyang.IO.USBPrinting> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var manager = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbManager> (native_manager, JniHandleOwnership.DoNotTransfer);
			var device = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDevice> (native_device, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.Open (manager, device);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.lvrenyang.io']/class[@name='USBPrinting']/method[@name='Open' and count(parameter)=2 and parameter[1][@type='android.hardware.usb.UsbManager'] and parameter[2][@type='android.hardware.usb.UsbDevice']]"
		[Register ("Open", "(Landroid/hardware/usb/UsbManager;Landroid/hardware/usb/UsbDevice;)Z", "GetOpen_Landroid_hardware_usb_UsbManager_Landroid_hardware_usb_UsbDevice_Handler")]
		public virtual unsafe bool Open (global::Android.Hardware.Usb.UsbManager manager, global::Android.Hardware.Usb.UsbDevice device)
		{
			const string __id = "Open.(Landroid/hardware/usb/UsbManager;Landroid/hardware/usb/UsbDevice;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((manager == null) ? IntPtr.Zero : ((global::Java.Lang.Object) manager).Handle);
				__args [1] = new JniArgumentValue ((device == null) ? IntPtr.Zero : ((global::Java.Lang.Object) device).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (manager);
				global::System.GC.KeepAlive (device);
			}
		}

		static Delegate cb_SetCallBack_Lcom_lvrenyang_io_IOCallBack_;
#pragma warning disable 0169
		static Delegate GetSetCallBack_Lcom_lvrenyang_io_IOCallBack_Handler ()
		{
			if (cb_SetCallBack_Lcom_lvrenyang_io_IOCallBack_ == null)
				cb_SetCallBack_Lcom_lvrenyang_io_IOCallBack_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetCallBack_Lcom_lvrenyang_io_IOCallBack_));
			return cb_SetCallBack_Lcom_lvrenyang_io_IOCallBack_;
		}

		static void n_SetCallBack_Lcom_lvrenyang_io_IOCallBack_ (IntPtr jnienv, IntPtr native__this, IntPtr native_callBack)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Lvrenyang.IO.USBPrinting> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var callBack = (global::Com.Lvrenyang.IO.IOCallBack)global::Java.Lang.Object.GetObject<global::Com.Lvrenyang.IO.IOCallBack> (native_callBack, JniHandleOwnership.DoNotTransfer);
			__this.SetCallBack (callBack);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.lvrenyang.io']/class[@name='USBPrinting']/method[@name='SetCallBack' and count(parameter)=1 and parameter[1][@type='com.lvrenyang.io.IOCallBack']]"
		[Register ("SetCallBack", "(Lcom/lvrenyang/io/IOCallBack;)V", "GetSetCallBack_Lcom_lvrenyang_io_IOCallBack_Handler")]
		public virtual unsafe void SetCallBack (global::Com.Lvrenyang.IO.IOCallBack callBack)
		{
			const string __id = "SetCallBack.(Lcom/lvrenyang/io/IOCallBack;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((callBack == null) ? IntPtr.Zero : ((global::Java.Lang.Object) callBack).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (callBack);
			}
		}

	}
}
